// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote/ethbackend.proto

#include "remote/ethbackend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace remote {
PROTOBUF_CONSTEXPR EtherbaseRequest::EtherbaseRequest(
    ::_pbi::ConstantInitialized) {}
struct EtherbaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtherbaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtherbaseRequestDefaultTypeInternal() {}
  union {
    EtherbaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtherbaseRequestDefaultTypeInternal _EtherbaseRequest_default_instance_;
PROTOBUF_CONSTEXPR EtherbaseReply::EtherbaseReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EtherbaseReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtherbaseReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtherbaseReplyDefaultTypeInternal() {}
  union {
    EtherbaseReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtherbaseReplyDefaultTypeInternal _EtherbaseReply_default_instance_;
PROTOBUF_CONSTEXPR NetVersionRequest::NetVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct NetVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetVersionRequestDefaultTypeInternal() {}
  union {
    NetVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetVersionRequestDefaultTypeInternal _NetVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR NetVersionReply::NetVersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetVersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetVersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetVersionReplyDefaultTypeInternal() {}
  union {
    NetVersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetVersionReplyDefaultTypeInternal _NetVersionReply_default_instance_;
PROTOBUF_CONSTEXPR NetPeerCountRequest::NetPeerCountRequest(
    ::_pbi::ConstantInitialized) {}
struct NetPeerCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetPeerCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetPeerCountRequestDefaultTypeInternal() {}
  union {
    NetPeerCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetPeerCountRequestDefaultTypeInternal _NetPeerCountRequest_default_instance_;
PROTOBUF_CONSTEXPR NetPeerCountReply::NetPeerCountReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetPeerCountReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetPeerCountReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetPeerCountReplyDefaultTypeInternal() {}
  union {
    NetPeerCountReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetPeerCountReplyDefaultTypeInternal _NetPeerCountReply_default_instance_;
PROTOBUF_CONSTEXPR EngineGetPayloadRequest::EngineGetPayloadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payloadid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineGetPayloadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineGetPayloadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineGetPayloadRequestDefaultTypeInternal() {}
  union {
    EngineGetPayloadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineGetPayloadRequestDefaultTypeInternal _EngineGetPayloadRequest_default_instance_;
PROTOBUF_CONSTEXPR EnginePayloadStatus::EnginePayloadStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validationerror_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latestvalidhash_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnginePayloadStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnginePayloadStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnginePayloadStatusDefaultTypeInternal() {}
  union {
    EnginePayloadStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnginePayloadStatusDefaultTypeInternal _EnginePayloadStatus_default_instance_;
PROTOBUF_CONSTEXPR EnginePayloadAttributes::EnginePayloadAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prevrandao_)*/nullptr
  , /*decltype(_impl_.suggestedfeerecipient_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnginePayloadAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnginePayloadAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnginePayloadAttributesDefaultTypeInternal() {}
  union {
    EnginePayloadAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnginePayloadAttributesDefaultTypeInternal _EnginePayloadAttributes_default_instance_;
PROTOBUF_CONSTEXPR EngineForkChoiceState::EngineForkChoiceState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headblockhash_)*/nullptr
  , /*decltype(_impl_.safeblockhash_)*/nullptr
  , /*decltype(_impl_.finalizedblockhash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineForkChoiceStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineForkChoiceStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineForkChoiceStateDefaultTypeInternal() {}
  union {
    EngineForkChoiceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineForkChoiceStateDefaultTypeInternal _EngineForkChoiceState_default_instance_;
PROTOBUF_CONSTEXPR EngineForkChoiceUpdatedRequest::EngineForkChoiceUpdatedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.forkchoicestate_)*/nullptr
  , /*decltype(_impl_.payloadattributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineForkChoiceUpdatedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineForkChoiceUpdatedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineForkChoiceUpdatedRequestDefaultTypeInternal() {}
  union {
    EngineForkChoiceUpdatedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineForkChoiceUpdatedRequestDefaultTypeInternal _EngineForkChoiceUpdatedRequest_default_instance_;
PROTOBUF_CONSTEXPR EnginePayloadAttributesV2::EnginePayloadAttributesV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.withdrawals_)*/{}
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnginePayloadAttributesV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnginePayloadAttributesV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnginePayloadAttributesV2DefaultTypeInternal() {}
  union {
    EnginePayloadAttributesV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnginePayloadAttributesV2DefaultTypeInternal _EnginePayloadAttributesV2_default_instance_;
PROTOBUF_CONSTEXPR EngineForkChoiceUpdatedRequestV2::EngineForkChoiceUpdatedRequestV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.forkchoicestate_)*/nullptr
  , /*decltype(_impl_.payloadattributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineForkChoiceUpdatedRequestV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineForkChoiceUpdatedRequestV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineForkChoiceUpdatedRequestV2DefaultTypeInternal() {}
  union {
    EngineForkChoiceUpdatedRequestV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineForkChoiceUpdatedRequestV2DefaultTypeInternal _EngineForkChoiceUpdatedRequestV2_default_instance_;
PROTOBUF_CONSTEXPR EngineForkChoiceUpdatedReply::EngineForkChoiceUpdatedReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payloadstatus_)*/nullptr
  , /*decltype(_impl_.payloadid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineForkChoiceUpdatedReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineForkChoiceUpdatedReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineForkChoiceUpdatedReplyDefaultTypeInternal() {}
  union {
    EngineForkChoiceUpdatedReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineForkChoiceUpdatedReplyDefaultTypeInternal _EngineForkChoiceUpdatedReply_default_instance_;
PROTOBUF_CONSTEXPR ProtocolVersionRequest::ProtocolVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct ProtocolVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolVersionRequestDefaultTypeInternal() {}
  union {
    ProtocolVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolVersionRequestDefaultTypeInternal _ProtocolVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ProtocolVersionReply::ProtocolVersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtocolVersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolVersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolVersionReplyDefaultTypeInternal() {}
  union {
    ProtocolVersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolVersionReplyDefaultTypeInternal _ProtocolVersionReply_default_instance_;
PROTOBUF_CONSTEXPR ClientVersionRequest::ClientVersionRequest(
    ::_pbi::ConstantInitialized) {}
struct ClientVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientVersionRequestDefaultTypeInternal() {}
  union {
    ClientVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientVersionRequestDefaultTypeInternal _ClientVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientVersionReply::ClientVersionReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientVersionReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientVersionReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientVersionReplyDefaultTypeInternal() {}
  union {
    ClientVersionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientVersionReplyDefaultTypeInternal _ClientVersionReply_default_instance_;
PROTOBUF_CONSTEXPR SubscribeRequest::SubscribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeReply::SubscribeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeReplyDefaultTypeInternal() {}
  union {
    SubscribeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeReplyDefaultTypeInternal _SubscribeReply_default_instance_;
PROTOBUF_CONSTEXPR LogsFilterRequest::LogsFilterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.alladdresses_)*/false
  , /*decltype(_impl_.alltopics_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogsFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogsFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogsFilterRequestDefaultTypeInternal() {}
  union {
    LogsFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogsFilterRequestDefaultTypeInternal _LogsFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribeLogsReply::SubscribeLogsReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/nullptr
  , /*decltype(_impl_.blockhash_)*/nullptr
  , /*decltype(_impl_.transactionhash_)*/nullptr
  , /*decltype(_impl_.blocknumber_)*/uint64_t{0u}
  , /*decltype(_impl_.logindex_)*/uint64_t{0u}
  , /*decltype(_impl_.transactionindex_)*/uint64_t{0u}
  , /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeLogsReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeLogsReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeLogsReplyDefaultTypeInternal() {}
  union {
    SubscribeLogsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeLogsReplyDefaultTypeInternal _SubscribeLogsReply_default_instance_;
PROTOBUF_CONSTEXPR BlockRequest::BlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockhash_)*/nullptr
  , /*decltype(_impl_.blockheight_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRequestDefaultTypeInternal() {}
  union {
    BlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
PROTOBUF_CONSTEXPR BlockReply::BlockReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockrlp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.senders_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockReplyDefaultTypeInternal() {}
  union {
    BlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockReplyDefaultTypeInternal _BlockReply_default_instance_;
PROTOBUF_CONSTEXPR TxnLookupRequest::TxnLookupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txnhash_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxnLookupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxnLookupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxnLookupRequestDefaultTypeInternal() {}
  union {
    TxnLookupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxnLookupRequestDefaultTypeInternal _TxnLookupRequest_default_instance_;
PROTOBUF_CONSTEXPR TxnLookupReply::TxnLookupReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocknumber_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxnLookupReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxnLookupReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxnLookupReplyDefaultTypeInternal() {}
  union {
    TxnLookupReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxnLookupReplyDefaultTypeInternal _TxnLookupReply_default_instance_;
PROTOBUF_CONSTEXPR NodesInfoRequest::NodesInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodesInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodesInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodesInfoRequestDefaultTypeInternal() {}
  union {
    NodesInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodesInfoRequestDefaultTypeInternal _NodesInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR NodesInfoReply::NodesInfoReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodesinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodesInfoReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodesInfoReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodesInfoReplyDefaultTypeInternal() {}
  union {
    NodesInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodesInfoReplyDefaultTypeInternal _NodesInfoReply_default_instance_;
PROTOBUF_CONSTEXPR PeersReply::PeersReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeersReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeersReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeersReplyDefaultTypeInternal() {}
  union {
    PeersReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeersReplyDefaultTypeInternal _PeersReply_default_instance_;
PROTOBUF_CONSTEXPR PendingBlockReply::PendingBlockReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockrlp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PendingBlockReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PendingBlockReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PendingBlockReplyDefaultTypeInternal() {}
  union {
    PendingBlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PendingBlockReplyDefaultTypeInternal _PendingBlockReply_default_instance_;
}  // namespace remote
static ::_pb::Metadata file_level_metadata_remote_2fethbackend_2eproto[30];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_remote_2fethbackend_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_remote_2fethbackend_2eproto = nullptr;

const uint32_t TableStruct_remote_2fethbackend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EtherbaseReply, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NetVersionReply, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NetPeerCountReply, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineGetPayloadRequest, _impl_.payloadid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadStatus, _impl_.latestvalidhash_),
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadStatus, _impl_.validationerror_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributes, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributes, _impl_.prevrandao_),
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributes, _impl_.suggestedfeerecipient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceState, _impl_.headblockhash_),
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceState, _impl_.safeblockhash_),
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceState, _impl_.finalizedblockhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedRequest, _impl_.forkchoicestate_),
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedRequest, _impl_.payloadattributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributesV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributesV2, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::remote::EnginePayloadAttributesV2, _impl_.withdrawals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedRequestV2, _impl_.forkchoicestate_),
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedRequestV2, _impl_.payloadattributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedReply, _impl_.payloadstatus_),
  PROTOBUF_FIELD_OFFSET(::remote::EngineForkChoiceUpdatedReply, _impl_.payloadid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::ProtocolVersionReply, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::ClientVersionReply, _impl_.nodename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeReply, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.alladdresses_),
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.addresses_),
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.alltopics_),
  PROTOBUF_FIELD_OFFSET(::remote::LogsFilterRequest, _impl_.topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.blockhash_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.blocknumber_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.logindex_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.topics_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.transactionhash_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.transactionindex_),
  PROTOBUF_FIELD_OFFSET(::remote::SubscribeLogsReply, _impl_.removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::BlockRequest, _impl_.blockheight_),
  PROTOBUF_FIELD_OFFSET(::remote::BlockRequest, _impl_.blockhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::BlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::BlockReply, _impl_.blockrlp_),
  PROTOBUF_FIELD_OFFSET(::remote::BlockReply, _impl_.senders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupRequest, _impl_.txnhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::TxnLookupReply, _impl_.blocknumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::NodesInfoReply, _impl_.nodesinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::PeersReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::PeersReply, _impl_.peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::remote::PendingBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::remote::PendingBlockReply, _impl_.blockrlp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::remote::EtherbaseRequest)},
  { 6, -1, -1, sizeof(::remote::EtherbaseReply)},
  { 13, -1, -1, sizeof(::remote::NetVersionRequest)},
  { 19, -1, -1, sizeof(::remote::NetVersionReply)},
  { 26, -1, -1, sizeof(::remote::NetPeerCountRequest)},
  { 32, -1, -1, sizeof(::remote::NetPeerCountReply)},
  { 39, -1, -1, sizeof(::remote::EngineGetPayloadRequest)},
  { 46, -1, -1, sizeof(::remote::EnginePayloadStatus)},
  { 55, -1, -1, sizeof(::remote::EnginePayloadAttributes)},
  { 64, -1, -1, sizeof(::remote::EngineForkChoiceState)},
  { 73, -1, -1, sizeof(::remote::EngineForkChoiceUpdatedRequest)},
  { 81, -1, -1, sizeof(::remote::EnginePayloadAttributesV2)},
  { 89, -1, -1, sizeof(::remote::EngineForkChoiceUpdatedRequestV2)},
  { 97, -1, -1, sizeof(::remote::EngineForkChoiceUpdatedReply)},
  { 105, -1, -1, sizeof(::remote::ProtocolVersionRequest)},
  { 111, -1, -1, sizeof(::remote::ProtocolVersionReply)},
  { 118, -1, -1, sizeof(::remote::ClientVersionRequest)},
  { 124, -1, -1, sizeof(::remote::ClientVersionReply)},
  { 131, -1, -1, sizeof(::remote::SubscribeRequest)},
  { 138, -1, -1, sizeof(::remote::SubscribeReply)},
  { 146, -1, -1, sizeof(::remote::LogsFilterRequest)},
  { 156, -1, -1, sizeof(::remote::SubscribeLogsReply)},
  { 171, -1, -1, sizeof(::remote::BlockRequest)},
  { 179, -1, -1, sizeof(::remote::BlockReply)},
  { 187, -1, -1, sizeof(::remote::TxnLookupRequest)},
  { 194, -1, -1, sizeof(::remote::TxnLookupReply)},
  { 201, -1, -1, sizeof(::remote::NodesInfoRequest)},
  { 208, -1, -1, sizeof(::remote::NodesInfoReply)},
  { 215, -1, -1, sizeof(::remote::PeersReply)},
  { 222, -1, -1, sizeof(::remote::PendingBlockReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::remote::_EtherbaseRequest_default_instance_._instance,
  &::remote::_EtherbaseReply_default_instance_._instance,
  &::remote::_NetVersionRequest_default_instance_._instance,
  &::remote::_NetVersionReply_default_instance_._instance,
  &::remote::_NetPeerCountRequest_default_instance_._instance,
  &::remote::_NetPeerCountReply_default_instance_._instance,
  &::remote::_EngineGetPayloadRequest_default_instance_._instance,
  &::remote::_EnginePayloadStatus_default_instance_._instance,
  &::remote::_EnginePayloadAttributes_default_instance_._instance,
  &::remote::_EngineForkChoiceState_default_instance_._instance,
  &::remote::_EngineForkChoiceUpdatedRequest_default_instance_._instance,
  &::remote::_EnginePayloadAttributesV2_default_instance_._instance,
  &::remote::_EngineForkChoiceUpdatedRequestV2_default_instance_._instance,
  &::remote::_EngineForkChoiceUpdatedReply_default_instance_._instance,
  &::remote::_ProtocolVersionRequest_default_instance_._instance,
  &::remote::_ProtocolVersionReply_default_instance_._instance,
  &::remote::_ClientVersionRequest_default_instance_._instance,
  &::remote::_ClientVersionReply_default_instance_._instance,
  &::remote::_SubscribeRequest_default_instance_._instance,
  &::remote::_SubscribeReply_default_instance_._instance,
  &::remote::_LogsFilterRequest_default_instance_._instance,
  &::remote::_SubscribeLogsReply_default_instance_._instance,
  &::remote::_BlockRequest_default_instance_._instance,
  &::remote::_BlockReply_default_instance_._instance,
  &::remote::_TxnLookupRequest_default_instance_._instance,
  &::remote::_TxnLookupReply_default_instance_._instance,
  &::remote::_NodesInfoRequest_default_instance_._instance,
  &::remote::_NodesInfoReply_default_instance_._instance,
  &::remote::_PeersReply_default_instance_._instance,
  &::remote::_PendingBlockReply_default_instance_._instance,
};

const char descriptor_table_protodef_remote_2fethbackend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027remote/ethbackend.proto\022\006remote\032\033googl"
  "e/protobuf/empty.proto\032\021types/types.prot"
  "o\"\022\n\020EtherbaseRequest\".\n\016EtherbaseReply\022"
  "\034\n\007address\030\001 \001(\0132\013.types.H160\"\023\n\021NetVers"
  "ionRequest\"\035\n\017NetVersionReply\022\n\n\002id\030\001 \001("
  "\004\"\025\n\023NetPeerCountRequest\"\"\n\021NetPeerCount"
  "Reply\022\r\n\005count\030\001 \001(\004\",\n\027EngineGetPayload"
  "Request\022\021\n\tpayloadId\030\001 \001(\004\"z\n\023EnginePayl"
  "oadStatus\022$\n\006status\030\001 \001(\0162\024.remote.Engin"
  "eStatus\022$\n\017latestValidHash\030\002 \001(\0132\013.types"
  ".H256\022\027\n\017validationError\030\003 \001(\t\"y\n\027Engine"
  "PayloadAttributes\022\021\n\ttimestamp\030\001 \001(\004\022\037\n\n"
  "prevRandao\030\002 \001(\0132\013.types.H256\022*\n\025suggest"
  "edFeeRecipient\030\003 \001(\0132\013.types.H160\"\210\001\n\025En"
  "gineForkChoiceState\022\"\n\rheadBlockHash\030\001 \001"
  "(\0132\013.types.H256\022\"\n\rsafeBlockHash\030\002 \001(\0132\013"
  ".types.H256\022\'\n\022finalizedBlockHash\030\003 \001(\0132"
  "\013.types.H256\"\224\001\n\036EngineForkChoiceUpdated"
  "Request\0226\n\017forkchoiceState\030\001 \001(\0132\035.remot"
  "e.EngineForkChoiceState\022:\n\021payloadAttrib"
  "utes\030\002 \001(\0132\037.remote.EnginePayloadAttribu"
  "tes\"x\n\031EnginePayloadAttributesV2\0223\n\nattr"
  "ibutes\030\001 \001(\0132\037.remote.EnginePayloadAttri"
  "butes\022&\n\013withdrawals\030\002 \003(\0132\021.types.Withd"
  "rawal\"\230\001\n EngineForkChoiceUpdatedRequest"
  "V2\0226\n\017forkchoiceState\030\001 \001(\0132\035.remote.Eng"
  "ineForkChoiceState\022<\n\021payloadAttributes\030"
  "\002 \001(\0132!.remote.EnginePayloadAttributesV2"
  "\"e\n\034EngineForkChoiceUpdatedReply\0222\n\rpayl"
  "oadStatus\030\001 \001(\0132\033.remote.EnginePayloadSt"
  "atus\022\021\n\tpayloadId\030\002 \001(\004\"\030\n\026ProtocolVersi"
  "onRequest\"\"\n\024ProtocolVersionReply\022\n\n\002id\030"
  "\001 \001(\004\"\026\n\024ClientVersionRequest\"&\n\022ClientV"
  "ersionReply\022\020\n\010nodeName\030\001 \001(\t\"/\n\020Subscri"
  "beRequest\022\033\n\004type\030\001 \001(\0162\r.remote.Event\";"
  "\n\016SubscribeReply\022\033\n\004type\030\001 \001(\0162\r.remote."
  "Event\022\014\n\004data\030\002 \001(\014\"y\n\021LogsFilterRequest"
  "\022\024\n\014allAddresses\030\001 \001(\010\022\036\n\taddresses\030\002 \003("
  "\0132\013.types.H160\022\021\n\tallTopics\030\003 \001(\010\022\033\n\006top"
  "ics\030\004 \003(\0132\013.types.H256\"\365\001\n\022SubscribeLogs"
  "Reply\022\034\n\007address\030\001 \001(\0132\013.types.H160\022\036\n\tb"
  "lockHash\030\002 \001(\0132\013.types.H256\022\023\n\013blockNumb"
  "er\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\020\n\010logIndex\030\005 \001(\004"
  "\022\033\n\006topics\030\006 \003(\0132\013.types.H256\022$\n\017transac"
  "tionHash\030\007 \001(\0132\013.types.H256\022\030\n\020transacti"
  "onIndex\030\010 \001(\004\022\017\n\007removed\030\t \001(\010\"C\n\014BlockR"
  "equest\022\023\n\013blockHeight\030\002 \001(\004\022\036\n\tblockHash"
  "\030\003 \001(\0132\013.types.H256\"/\n\nBlockReply\022\020\n\010blo"
  "ckRlp\030\001 \001(\014\022\017\n\007senders\030\002 \001(\014\"0\n\020TxnLooku"
  "pRequest\022\034\n\007txnHash\030\001 \001(\0132\013.types.H256\"%"
  "\n\016TxnLookupReply\022\023\n\013blockNumber\030\001 \001(\004\"!\n"
  "\020NodesInfoRequest\022\r\n\005limit\030\001 \001(\r\"9\n\016Node"
  "sInfoReply\022\'\n\tnodesInfo\030\001 \003(\0132\024.types.No"
  "deInfoReply\",\n\nPeersReply\022\036\n\005peers\030\001 \003(\013"
  "2\017.types.PeerInfo\"%\n\021PendingBlockReply\022\020"
  "\n\010blockRlp\030\001 \001(\014*J\n\005Event\022\n\n\006HEADER\020\000\022\020\n"
  "\014PENDING_LOGS\020\001\022\021\n\rPENDING_BLOCK\020\002\022\020\n\014NE"
  "W_SNAPSHOT\020\003*Y\n\014EngineStatus\022\t\n\005VALID\020\000\022"
  "\013\n\007INVALID\020\001\022\013\n\007SYNCING\020\002\022\014\n\010ACCEPTED\020\003\022"
  "\026\n\022INVALID_BLOCK_HASH\020\0042\362\n\n\nETHBACKEND\022="
  "\n\tEtherbase\022\030.remote.EtherbaseRequest\032\026."
  "remote.EtherbaseReply\022@\n\nNetVersion\022\031.re"
  "mote.NetVersionRequest\032\027.remote.NetVersi"
  "onReply\022F\n\014NetPeerCount\022\033.remote.NetPeer"
  "CountRequest\032\031.remote.NetPeerCountReply\022"
  "J\n\022EngineNewPayloadV1\022\027.types.ExecutionP"
  "ayload\032\033.remote.EnginePayloadStatus\022L\n\022E"
  "ngineNewPayloadV2\022\031.types.ExecutionPaylo"
  "adV2\032\033.remote.EnginePayloadStatus\022i\n\031Eng"
  "ineForkChoiceUpdatedV1\022&.remote.EngineFo"
  "rkChoiceUpdatedRequest\032$.remote.EngineFo"
  "rkChoiceUpdatedReply\022k\n\031EngineForkChoice"
  "UpdatedV2\022(.remote.EngineForkChoiceUpdat"
  "edRequestV2\032$.remote.EngineForkChoiceUpd"
  "atedReply\022N\n\022EngineGetPayloadV1\022\037.remote"
  ".EngineGetPayloadRequest\032\027.types.Executi"
  "onPayload\022P\n\022EngineGetPayloadV2\022\037.remote"
  ".EngineGetPayloadRequest\032\031.types.Executi"
  "onPayloadV2\0226\n\007Version\022\026.google.protobuf"
  ".Empty\032\023.types.VersionReply\022O\n\017ProtocolV"
  "ersion\022\036.remote.ProtocolVersionRequest\032\034"
  ".remote.ProtocolVersionReply\022I\n\rClientVe"
  "rsion\022\034.remote.ClientVersionRequest\032\032.re"
  "mote.ClientVersionReply\022\?\n\tSubscribe\022\030.r"
  "emote.SubscribeRequest\032\026.remote.Subscrib"
  "eReply0\001\022J\n\rSubscribeLogs\022\031.remote.LogsF"
  "ilterRequest\032\032.remote.SubscribeLogsReply"
  "(\0010\001\0221\n\005Block\022\024.remote.BlockRequest\032\022.re"
  "mote.BlockReply\022=\n\tTxnLookup\022\030.remote.Tx"
  "nLookupRequest\032\026.remote.TxnLookupReply\022<"
  "\n\010NodeInfo\022\030.remote.NodesInfoRequest\032\026.r"
  "emote.NodesInfoReply\0223\n\005Peers\022\026.google.p"
  "rotobuf.Empty\032\022.remote.PeersReply\022A\n\014Pen"
  "dingBlock\022\026.google.protobuf.Empty\032\031.remo"
  "te.PendingBlockReplyB\021Z\017./remote;remoteb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_remote_2fethbackend_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_types_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_remote_2fethbackend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_remote_2fethbackend_2eproto = {
    false, false, 3807, descriptor_table_protodef_remote_2fethbackend_2eproto,
    "remote/ethbackend.proto",
    &descriptor_table_remote_2fethbackend_2eproto_once, descriptor_table_remote_2fethbackend_2eproto_deps, 2, 30,
    schemas, file_default_instances, TableStruct_remote_2fethbackend_2eproto::offsets,
    file_level_metadata_remote_2fethbackend_2eproto, file_level_enum_descriptors_remote_2fethbackend_2eproto,
    file_level_service_descriptors_remote_2fethbackend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_remote_2fethbackend_2eproto_getter() {
  return &descriptor_table_remote_2fethbackend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_remote_2fethbackend_2eproto(&descriptor_table_remote_2fethbackend_2eproto);
namespace remote {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fethbackend_2eproto);
  return file_level_enum_descriptors_remote_2fethbackend_2eproto[0];
}
bool Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_2fethbackend_2eproto);
  return file_level_enum_descriptors_remote_2fethbackend_2eproto[1];
}
bool EngineStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EtherbaseRequest::_Internal {
 public:
};

EtherbaseRequest::EtherbaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.EtherbaseRequest)
}
EtherbaseRequest::EtherbaseRequest(const EtherbaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EtherbaseRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.EtherbaseRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtherbaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtherbaseRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EtherbaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[0]);
}

// ===================================================================

class EtherbaseReply::_Internal {
 public:
  static const ::types::H160& address(const EtherbaseReply* msg);
};

const ::types::H160&
EtherbaseReply::_Internal::address(const EtherbaseReply* msg) {
  return *msg->_impl_.address_;
}
void EtherbaseReply::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
EtherbaseReply::EtherbaseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EtherbaseReply)
}
EtherbaseReply::EtherbaseReply(const EtherbaseReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EtherbaseReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.EtherbaseReply)
}

inline void EtherbaseReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EtherbaseReply::~EtherbaseReply() {
  // @@protoc_insertion_point(destructor:remote.EtherbaseReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EtherbaseReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.address_;
}

void EtherbaseReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EtherbaseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EtherbaseReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EtherbaseReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EtherbaseReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EtherbaseReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EtherbaseReply)
  return target;
}

size_t EtherbaseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EtherbaseReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EtherbaseReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EtherbaseReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EtherbaseReply::GetClassData() const { return &_class_data_; }


void EtherbaseReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EtherbaseReply*>(&to_msg);
  auto& from = static_cast<const EtherbaseReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EtherbaseReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EtherbaseReply::CopyFrom(const EtherbaseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EtherbaseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EtherbaseReply::IsInitialized() const {
  return true;
}

void EtherbaseReply::InternalSwap(EtherbaseReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EtherbaseReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[1]);
}

// ===================================================================

class NetVersionRequest::_Internal {
 public:
};

NetVersionRequest::NetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.NetVersionRequest)
}
NetVersionRequest::NetVersionRequest(const NetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NetVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NetVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NetVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[2]);
}

// ===================================================================

class NetVersionReply::_Internal {
 public:
};

NetVersionReply::NetVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NetVersionReply)
}
NetVersionReply::NetVersionReply(const NetVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetVersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:remote.NetVersionReply)
}

inline void NetVersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetVersionReply::~NetVersionReply() {
  // @@protoc_insertion_point(destructor:remote.NetVersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetVersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetVersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetVersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetVersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetVersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetVersionReply)
  return target;
}

size_t NetVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetVersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetVersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetVersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetVersionReply::GetClassData() const { return &_class_data_; }


void NetVersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetVersionReply*>(&to_msg);
  auto& from = static_cast<const NetVersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NetVersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetVersionReply::CopyFrom(const NetVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetVersionReply::IsInitialized() const {
  return true;
}

void NetVersionReply::InternalSwap(NetVersionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetVersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[3]);
}

// ===================================================================

class NetPeerCountRequest::_Internal {
 public:
};

NetPeerCountRequest::NetPeerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.NetPeerCountRequest)
}
NetPeerCountRequest::NetPeerCountRequest(const NetPeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NetPeerCountRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NetPeerCountRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetPeerCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetPeerCountRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NetPeerCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[4]);
}

// ===================================================================

class NetPeerCountReply::_Internal {
 public:
};

NetPeerCountReply::NetPeerCountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NetPeerCountReply)
}
NetPeerCountReply::NetPeerCountReply(const NetPeerCountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetPeerCountReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:remote.NetPeerCountReply)
}

inline void NetPeerCountReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetPeerCountReply::~NetPeerCountReply() {
  // @@protoc_insertion_point(destructor:remote.NetPeerCountReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetPeerCountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetPeerCountReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetPeerCountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NetPeerCountReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetPeerCountReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetPeerCountReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NetPeerCountReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NetPeerCountReply)
  return target;
}

size_t NetPeerCountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NetPeerCountReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetPeerCountReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetPeerCountReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetPeerCountReply::GetClassData() const { return &_class_data_; }


void NetPeerCountReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetPeerCountReply*>(&to_msg);
  auto& from = static_cast<const NetPeerCountReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NetPeerCountReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetPeerCountReply::CopyFrom(const NetPeerCountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NetPeerCountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetPeerCountReply::IsInitialized() const {
  return true;
}

void NetPeerCountReply::InternalSwap(NetPeerCountReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetPeerCountReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[5]);
}

// ===================================================================

class EngineGetPayloadRequest::_Internal {
 public:
};

EngineGetPayloadRequest::EngineGetPayloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineGetPayloadRequest)
}
EngineGetPayloadRequest::EngineGetPayloadRequest(const EngineGetPayloadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineGetPayloadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payloadid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.payloadid_ = from._impl_.payloadid_;
  // @@protoc_insertion_point(copy_constructor:remote.EngineGetPayloadRequest)
}

inline void EngineGetPayloadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payloadid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineGetPayloadRequest::~EngineGetPayloadRequest() {
  // @@protoc_insertion_point(destructor:remote.EngineGetPayloadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineGetPayloadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EngineGetPayloadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineGetPayloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineGetPayloadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payloadid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineGetPayloadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 payloadId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.payloadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineGetPayloadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineGetPayloadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 payloadId = 1;
  if (this->_internal_payloadid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_payloadid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineGetPayloadRequest)
  return target;
}

size_t EngineGetPayloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineGetPayloadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 payloadId = 1;
  if (this->_internal_payloadid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_payloadid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineGetPayloadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineGetPayloadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineGetPayloadRequest::GetClassData() const { return &_class_data_; }


void EngineGetPayloadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineGetPayloadRequest*>(&to_msg);
  auto& from = static_cast<const EngineGetPayloadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineGetPayloadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_payloadid() != 0) {
    _this->_internal_set_payloadid(from._internal_payloadid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineGetPayloadRequest::CopyFrom(const EngineGetPayloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineGetPayloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineGetPayloadRequest::IsInitialized() const {
  return true;
}

void EngineGetPayloadRequest::InternalSwap(EngineGetPayloadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payloadid_, other->_impl_.payloadid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineGetPayloadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[6]);
}

// ===================================================================

class EnginePayloadStatus::_Internal {
 public:
  static const ::types::H256& latestvalidhash(const EnginePayloadStatus* msg);
};

const ::types::H256&
EnginePayloadStatus::_Internal::latestvalidhash(const EnginePayloadStatus* msg) {
  return *msg->_impl_.latestvalidhash_;
}
void EnginePayloadStatus::clear_latestvalidhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.latestvalidhash_ != nullptr) {
    delete _impl_.latestvalidhash_;
  }
  _impl_.latestvalidhash_ = nullptr;
}
EnginePayloadStatus::EnginePayloadStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EnginePayloadStatus)
}
EnginePayloadStatus::EnginePayloadStatus(const EnginePayloadStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnginePayloadStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validationerror_){}
    , decltype(_impl_.latestvalidhash_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validationerror_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validationerror_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validationerror().empty()) {
    _this->_impl_.validationerror_.Set(from._internal_validationerror(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_latestvalidhash()) {
    _this->_impl_.latestvalidhash_ = new ::types::H256(*from._impl_.latestvalidhash_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:remote.EnginePayloadStatus)
}

inline void EnginePayloadStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validationerror_){}
    , decltype(_impl_.latestvalidhash_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.validationerror_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validationerror_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnginePayloadStatus::~EnginePayloadStatus() {
  // @@protoc_insertion_point(destructor:remote.EnginePayloadStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnginePayloadStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validationerror_.Destroy();
  if (this != internal_default_instance()) delete _impl_.latestvalidhash_;
}

void EnginePayloadStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnginePayloadStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EnginePayloadStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validationerror_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.latestvalidhash_ != nullptr) {
    delete _impl_.latestvalidhash_;
  }
  _impl_.latestvalidhash_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnginePayloadStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.EngineStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::remote::EngineStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 latestValidHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latestvalidhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string validationError = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_validationerror();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.EnginePayloadStatus.validationError"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnginePayloadStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EnginePayloadStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.EngineStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .types.H256 latestValidHash = 2;
  if (this->_internal_has_latestvalidhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latestvalidhash(this),
        _Internal::latestvalidhash(this).GetCachedSize(), target, stream);
  }

  // string validationError = 3;
  if (!this->_internal_validationerror().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validationerror().data(), static_cast<int>(this->_internal_validationerror().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.EnginePayloadStatus.validationError");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_validationerror(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EnginePayloadStatus)
  return target;
}

size_t EnginePayloadStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EnginePayloadStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validationError = 3;
  if (!this->_internal_validationerror().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validationerror());
  }

  // .types.H256 latestValidHash = 2;
  if (this->_internal_has_latestvalidhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latestvalidhash_);
  }

  // .remote.EngineStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnginePayloadStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnginePayloadStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnginePayloadStatus::GetClassData() const { return &_class_data_; }


void EnginePayloadStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnginePayloadStatus*>(&to_msg);
  auto& from = static_cast<const EnginePayloadStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EnginePayloadStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validationerror().empty()) {
    _this->_internal_set_validationerror(from._internal_validationerror());
  }
  if (from._internal_has_latestvalidhash()) {
    _this->_internal_mutable_latestvalidhash()->::types::H256::MergeFrom(
        from._internal_latestvalidhash());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnginePayloadStatus::CopyFrom(const EnginePayloadStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EnginePayloadStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnginePayloadStatus::IsInitialized() const {
  return true;
}

void EnginePayloadStatus::InternalSwap(EnginePayloadStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.validationerror_, lhs_arena,
      &other->_impl_.validationerror_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnginePayloadStatus, _impl_.status_)
      + sizeof(EnginePayloadStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(EnginePayloadStatus, _impl_.latestvalidhash_)>(
          reinterpret_cast<char*>(&_impl_.latestvalidhash_),
          reinterpret_cast<char*>(&other->_impl_.latestvalidhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnginePayloadStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[7]);
}

// ===================================================================

class EnginePayloadAttributes::_Internal {
 public:
  static const ::types::H256& prevrandao(const EnginePayloadAttributes* msg);
  static const ::types::H160& suggestedfeerecipient(const EnginePayloadAttributes* msg);
};

const ::types::H256&
EnginePayloadAttributes::_Internal::prevrandao(const EnginePayloadAttributes* msg) {
  return *msg->_impl_.prevrandao_;
}
const ::types::H160&
EnginePayloadAttributes::_Internal::suggestedfeerecipient(const EnginePayloadAttributes* msg) {
  return *msg->_impl_.suggestedfeerecipient_;
}
void EnginePayloadAttributes::clear_prevrandao() {
  if (GetArenaForAllocation() == nullptr && _impl_.prevrandao_ != nullptr) {
    delete _impl_.prevrandao_;
  }
  _impl_.prevrandao_ = nullptr;
}
void EnginePayloadAttributes::clear_suggestedfeerecipient() {
  if (GetArenaForAllocation() == nullptr && _impl_.suggestedfeerecipient_ != nullptr) {
    delete _impl_.suggestedfeerecipient_;
  }
  _impl_.suggestedfeerecipient_ = nullptr;
}
EnginePayloadAttributes::EnginePayloadAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EnginePayloadAttributes)
}
EnginePayloadAttributes::EnginePayloadAttributes(const EnginePayloadAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnginePayloadAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prevrandao_){nullptr}
    , decltype(_impl_.suggestedfeerecipient_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prevrandao()) {
    _this->_impl_.prevrandao_ = new ::types::H256(*from._impl_.prevrandao_);
  }
  if (from._internal_has_suggestedfeerecipient()) {
    _this->_impl_.suggestedfeerecipient_ = new ::types::H160(*from._impl_.suggestedfeerecipient_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:remote.EnginePayloadAttributes)
}

inline void EnginePayloadAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prevrandao_){nullptr}
    , decltype(_impl_.suggestedfeerecipient_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnginePayloadAttributes::~EnginePayloadAttributes() {
  // @@protoc_insertion_point(destructor:remote.EnginePayloadAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnginePayloadAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.prevrandao_;
  if (this != internal_default_instance()) delete _impl_.suggestedfeerecipient_;
}

void EnginePayloadAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnginePayloadAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EnginePayloadAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.prevrandao_ != nullptr) {
    delete _impl_.prevrandao_;
  }
  _impl_.prevrandao_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.suggestedfeerecipient_ != nullptr) {
    delete _impl_.suggestedfeerecipient_;
  }
  _impl_.suggestedfeerecipient_ = nullptr;
  _impl_.timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnginePayloadAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 prevRandao = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prevrandao(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H160 suggestedFeeRecipient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggestedfeerecipient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnginePayloadAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EnginePayloadAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .types.H256 prevRandao = 2;
  if (this->_internal_has_prevrandao()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prevrandao(this),
        _Internal::prevrandao(this).GetCachedSize(), target, stream);
  }

  // .types.H160 suggestedFeeRecipient = 3;
  if (this->_internal_has_suggestedfeerecipient()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::suggestedfeerecipient(this),
        _Internal::suggestedfeerecipient(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EnginePayloadAttributes)
  return target;
}

size_t EnginePayloadAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EnginePayloadAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 prevRandao = 2;
  if (this->_internal_has_prevrandao()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prevrandao_);
  }

  // .types.H160 suggestedFeeRecipient = 3;
  if (this->_internal_has_suggestedfeerecipient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.suggestedfeerecipient_);
  }

  // uint64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnginePayloadAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnginePayloadAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnginePayloadAttributes::GetClassData() const { return &_class_data_; }


void EnginePayloadAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnginePayloadAttributes*>(&to_msg);
  auto& from = static_cast<const EnginePayloadAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EnginePayloadAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prevrandao()) {
    _this->_internal_mutable_prevrandao()->::types::H256::MergeFrom(
        from._internal_prevrandao());
  }
  if (from._internal_has_suggestedfeerecipient()) {
    _this->_internal_mutable_suggestedfeerecipient()->::types::H160::MergeFrom(
        from._internal_suggestedfeerecipient());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnginePayloadAttributes::CopyFrom(const EnginePayloadAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EnginePayloadAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnginePayloadAttributes::IsInitialized() const {
  return true;
}

void EnginePayloadAttributes::InternalSwap(EnginePayloadAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnginePayloadAttributes, _impl_.timestamp_)
      + sizeof(EnginePayloadAttributes::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(EnginePayloadAttributes, _impl_.prevrandao_)>(
          reinterpret_cast<char*>(&_impl_.prevrandao_),
          reinterpret_cast<char*>(&other->_impl_.prevrandao_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnginePayloadAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[8]);
}

// ===================================================================

class EngineForkChoiceState::_Internal {
 public:
  static const ::types::H256& headblockhash(const EngineForkChoiceState* msg);
  static const ::types::H256& safeblockhash(const EngineForkChoiceState* msg);
  static const ::types::H256& finalizedblockhash(const EngineForkChoiceState* msg);
};

const ::types::H256&
EngineForkChoiceState::_Internal::headblockhash(const EngineForkChoiceState* msg) {
  return *msg->_impl_.headblockhash_;
}
const ::types::H256&
EngineForkChoiceState::_Internal::safeblockhash(const EngineForkChoiceState* msg) {
  return *msg->_impl_.safeblockhash_;
}
const ::types::H256&
EngineForkChoiceState::_Internal::finalizedblockhash(const EngineForkChoiceState* msg) {
  return *msg->_impl_.finalizedblockhash_;
}
void EngineForkChoiceState::clear_headblockhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.headblockhash_ != nullptr) {
    delete _impl_.headblockhash_;
  }
  _impl_.headblockhash_ = nullptr;
}
void EngineForkChoiceState::clear_safeblockhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.safeblockhash_ != nullptr) {
    delete _impl_.safeblockhash_;
  }
  _impl_.safeblockhash_ = nullptr;
}
void EngineForkChoiceState::clear_finalizedblockhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.finalizedblockhash_ != nullptr) {
    delete _impl_.finalizedblockhash_;
  }
  _impl_.finalizedblockhash_ = nullptr;
}
EngineForkChoiceState::EngineForkChoiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineForkChoiceState)
}
EngineForkChoiceState::EngineForkChoiceState(const EngineForkChoiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineForkChoiceState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.headblockhash_){nullptr}
    , decltype(_impl_.safeblockhash_){nullptr}
    , decltype(_impl_.finalizedblockhash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_headblockhash()) {
    _this->_impl_.headblockhash_ = new ::types::H256(*from._impl_.headblockhash_);
  }
  if (from._internal_has_safeblockhash()) {
    _this->_impl_.safeblockhash_ = new ::types::H256(*from._impl_.safeblockhash_);
  }
  if (from._internal_has_finalizedblockhash()) {
    _this->_impl_.finalizedblockhash_ = new ::types::H256(*from._impl_.finalizedblockhash_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.EngineForkChoiceState)
}

inline void EngineForkChoiceState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.headblockhash_){nullptr}
    , decltype(_impl_.safeblockhash_){nullptr}
    , decltype(_impl_.finalizedblockhash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineForkChoiceState::~EngineForkChoiceState() {
  // @@protoc_insertion_point(destructor:remote.EngineForkChoiceState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineForkChoiceState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.headblockhash_;
  if (this != internal_default_instance()) delete _impl_.safeblockhash_;
  if (this != internal_default_instance()) delete _impl_.finalizedblockhash_;
}

void EngineForkChoiceState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineForkChoiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineForkChoiceState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.headblockhash_ != nullptr) {
    delete _impl_.headblockhash_;
  }
  _impl_.headblockhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.safeblockhash_ != nullptr) {
    delete _impl_.safeblockhash_;
  }
  _impl_.safeblockhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.finalizedblockhash_ != nullptr) {
    delete _impl_.finalizedblockhash_;
  }
  _impl_.finalizedblockhash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineForkChoiceState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 headBlockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_headblockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 safeBlockHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_safeblockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 finalizedBlockHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_finalizedblockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineForkChoiceState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineForkChoiceState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 headBlockHash = 1;
  if (this->_internal_has_headblockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::headblockhash(this),
        _Internal::headblockhash(this).GetCachedSize(), target, stream);
  }

  // .types.H256 safeBlockHash = 2;
  if (this->_internal_has_safeblockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::safeblockhash(this),
        _Internal::safeblockhash(this).GetCachedSize(), target, stream);
  }

  // .types.H256 finalizedBlockHash = 3;
  if (this->_internal_has_finalizedblockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::finalizedblockhash(this),
        _Internal::finalizedblockhash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineForkChoiceState)
  return target;
}

size_t EngineForkChoiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineForkChoiceState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 headBlockHash = 1;
  if (this->_internal_has_headblockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.headblockhash_);
  }

  // .types.H256 safeBlockHash = 2;
  if (this->_internal_has_safeblockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.safeblockhash_);
  }

  // .types.H256 finalizedBlockHash = 3;
  if (this->_internal_has_finalizedblockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.finalizedblockhash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineForkChoiceState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineForkChoiceState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineForkChoiceState::GetClassData() const { return &_class_data_; }


void EngineForkChoiceState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineForkChoiceState*>(&to_msg);
  auto& from = static_cast<const EngineForkChoiceState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineForkChoiceState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_headblockhash()) {
    _this->_internal_mutable_headblockhash()->::types::H256::MergeFrom(
        from._internal_headblockhash());
  }
  if (from._internal_has_safeblockhash()) {
    _this->_internal_mutable_safeblockhash()->::types::H256::MergeFrom(
        from._internal_safeblockhash());
  }
  if (from._internal_has_finalizedblockhash()) {
    _this->_internal_mutable_finalizedblockhash()->::types::H256::MergeFrom(
        from._internal_finalizedblockhash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineForkChoiceState::CopyFrom(const EngineForkChoiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineForkChoiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineForkChoiceState::IsInitialized() const {
  return true;
}

void EngineForkChoiceState::InternalSwap(EngineForkChoiceState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineForkChoiceState, _impl_.finalizedblockhash_)
      + sizeof(EngineForkChoiceState::_impl_.finalizedblockhash_)
      - PROTOBUF_FIELD_OFFSET(EngineForkChoiceState, _impl_.headblockhash_)>(
          reinterpret_cast<char*>(&_impl_.headblockhash_),
          reinterpret_cast<char*>(&other->_impl_.headblockhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineForkChoiceState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[9]);
}

// ===================================================================

class EngineForkChoiceUpdatedRequest::_Internal {
 public:
  static const ::remote::EngineForkChoiceState& forkchoicestate(const EngineForkChoiceUpdatedRequest* msg);
  static const ::remote::EnginePayloadAttributes& payloadattributes(const EngineForkChoiceUpdatedRequest* msg);
};

const ::remote::EngineForkChoiceState&
EngineForkChoiceUpdatedRequest::_Internal::forkchoicestate(const EngineForkChoiceUpdatedRequest* msg) {
  return *msg->_impl_.forkchoicestate_;
}
const ::remote::EnginePayloadAttributes&
EngineForkChoiceUpdatedRequest::_Internal::payloadattributes(const EngineForkChoiceUpdatedRequest* msg) {
  return *msg->_impl_.payloadattributes_;
}
EngineForkChoiceUpdatedRequest::EngineForkChoiceUpdatedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineForkChoiceUpdatedRequest)
}
EngineForkChoiceUpdatedRequest::EngineForkChoiceUpdatedRequest(const EngineForkChoiceUpdatedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineForkChoiceUpdatedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.forkchoicestate_){nullptr}
    , decltype(_impl_.payloadattributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forkchoicestate()) {
    _this->_impl_.forkchoicestate_ = new ::remote::EngineForkChoiceState(*from._impl_.forkchoicestate_);
  }
  if (from._internal_has_payloadattributes()) {
    _this->_impl_.payloadattributes_ = new ::remote::EnginePayloadAttributes(*from._impl_.payloadattributes_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.EngineForkChoiceUpdatedRequest)
}

inline void EngineForkChoiceUpdatedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.forkchoicestate_){nullptr}
    , decltype(_impl_.payloadattributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineForkChoiceUpdatedRequest::~EngineForkChoiceUpdatedRequest() {
  // @@protoc_insertion_point(destructor:remote.EngineForkChoiceUpdatedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineForkChoiceUpdatedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.forkchoicestate_;
  if (this != internal_default_instance()) delete _impl_.payloadattributes_;
}

void EngineForkChoiceUpdatedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineForkChoiceUpdatedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineForkChoiceUpdatedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.forkchoicestate_ != nullptr) {
    delete _impl_.forkchoicestate_;
  }
  _impl_.forkchoicestate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payloadattributes_ != nullptr) {
    delete _impl_.payloadattributes_;
  }
  _impl_.payloadattributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineForkChoiceUpdatedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.EngineForkChoiceState forkchoiceState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_forkchoicestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .remote.EnginePayloadAttributes payloadAttributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payloadattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineForkChoiceUpdatedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineForkChoiceUpdatedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.EngineForkChoiceState forkchoiceState = 1;
  if (this->_internal_has_forkchoicestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::forkchoicestate(this),
        _Internal::forkchoicestate(this).GetCachedSize(), target, stream);
  }

  // .remote.EnginePayloadAttributes payloadAttributes = 2;
  if (this->_internal_has_payloadattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payloadattributes(this),
        _Internal::payloadattributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineForkChoiceUpdatedRequest)
  return target;
}

size_t EngineForkChoiceUpdatedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineForkChoiceUpdatedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.EngineForkChoiceState forkchoiceState = 1;
  if (this->_internal_has_forkchoicestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forkchoicestate_);
  }

  // .remote.EnginePayloadAttributes payloadAttributes = 2;
  if (this->_internal_has_payloadattributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payloadattributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineForkChoiceUpdatedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineForkChoiceUpdatedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineForkChoiceUpdatedRequest::GetClassData() const { return &_class_data_; }


void EngineForkChoiceUpdatedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineForkChoiceUpdatedRequest*>(&to_msg);
  auto& from = static_cast<const EngineForkChoiceUpdatedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineForkChoiceUpdatedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_forkchoicestate()) {
    _this->_internal_mutable_forkchoicestate()->::remote::EngineForkChoiceState::MergeFrom(
        from._internal_forkchoicestate());
  }
  if (from._internal_has_payloadattributes()) {
    _this->_internal_mutable_payloadattributes()->::remote::EnginePayloadAttributes::MergeFrom(
        from._internal_payloadattributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineForkChoiceUpdatedRequest::CopyFrom(const EngineForkChoiceUpdatedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineForkChoiceUpdatedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineForkChoiceUpdatedRequest::IsInitialized() const {
  return true;
}

void EngineForkChoiceUpdatedRequest::InternalSwap(EngineForkChoiceUpdatedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineForkChoiceUpdatedRequest, _impl_.payloadattributes_)
      + sizeof(EngineForkChoiceUpdatedRequest::_impl_.payloadattributes_)
      - PROTOBUF_FIELD_OFFSET(EngineForkChoiceUpdatedRequest, _impl_.forkchoicestate_)>(
          reinterpret_cast<char*>(&_impl_.forkchoicestate_),
          reinterpret_cast<char*>(&other->_impl_.forkchoicestate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineForkChoiceUpdatedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[10]);
}

// ===================================================================

class EnginePayloadAttributesV2::_Internal {
 public:
  static const ::remote::EnginePayloadAttributes& attributes(const EnginePayloadAttributesV2* msg);
};

const ::remote::EnginePayloadAttributes&
EnginePayloadAttributesV2::_Internal::attributes(const EnginePayloadAttributesV2* msg) {
  return *msg->_impl_.attributes_;
}
void EnginePayloadAttributesV2::clear_withdrawals() {
  _impl_.withdrawals_.Clear();
}
EnginePayloadAttributesV2::EnginePayloadAttributesV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EnginePayloadAttributesV2)
}
EnginePayloadAttributesV2::EnginePayloadAttributesV2(const EnginePayloadAttributesV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnginePayloadAttributesV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.withdrawals_){from._impl_.withdrawals_}
    , decltype(_impl_.attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::remote::EnginePayloadAttributes(*from._impl_.attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.EnginePayloadAttributesV2)
}

inline void EnginePayloadAttributesV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.withdrawals_){arena}
    , decltype(_impl_.attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnginePayloadAttributesV2::~EnginePayloadAttributesV2() {
  // @@protoc_insertion_point(destructor:remote.EnginePayloadAttributesV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnginePayloadAttributesV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.withdrawals_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void EnginePayloadAttributesV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnginePayloadAttributesV2::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EnginePayloadAttributesV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.withdrawals_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnginePayloadAttributesV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.EnginePayloadAttributes attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Withdrawal withdrawals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnginePayloadAttributesV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EnginePayloadAttributesV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.EnginePayloadAttributes attributes = 1;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // repeated .types.Withdrawal withdrawals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_withdrawals_size()); i < n; i++) {
    const auto& repfield = this->_internal_withdrawals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EnginePayloadAttributesV2)
  return target;
}

size_t EnginePayloadAttributesV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EnginePayloadAttributesV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.Withdrawal withdrawals = 2;
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->_impl_.withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .remote.EnginePayloadAttributes attributes = 1;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnginePayloadAttributesV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnginePayloadAttributesV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnginePayloadAttributesV2::GetClassData() const { return &_class_data_; }


void EnginePayloadAttributesV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnginePayloadAttributesV2*>(&to_msg);
  auto& from = static_cast<const EnginePayloadAttributesV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EnginePayloadAttributesV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.withdrawals_.MergeFrom(from._impl_.withdrawals_);
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::remote::EnginePayloadAttributes::MergeFrom(
        from._internal_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnginePayloadAttributesV2::CopyFrom(const EnginePayloadAttributesV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EnginePayloadAttributesV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnginePayloadAttributesV2::IsInitialized() const {
  return true;
}

void EnginePayloadAttributesV2::InternalSwap(EnginePayloadAttributesV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.withdrawals_.InternalSwap(&other->_impl_.withdrawals_);
  swap(_impl_.attributes_, other->_impl_.attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnginePayloadAttributesV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[11]);
}

// ===================================================================

class EngineForkChoiceUpdatedRequestV2::_Internal {
 public:
  static const ::remote::EngineForkChoiceState& forkchoicestate(const EngineForkChoiceUpdatedRequestV2* msg);
  static const ::remote::EnginePayloadAttributesV2& payloadattributes(const EngineForkChoiceUpdatedRequestV2* msg);
};

const ::remote::EngineForkChoiceState&
EngineForkChoiceUpdatedRequestV2::_Internal::forkchoicestate(const EngineForkChoiceUpdatedRequestV2* msg) {
  return *msg->_impl_.forkchoicestate_;
}
const ::remote::EnginePayloadAttributesV2&
EngineForkChoiceUpdatedRequestV2::_Internal::payloadattributes(const EngineForkChoiceUpdatedRequestV2* msg) {
  return *msg->_impl_.payloadattributes_;
}
EngineForkChoiceUpdatedRequestV2::EngineForkChoiceUpdatedRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineForkChoiceUpdatedRequestV2)
}
EngineForkChoiceUpdatedRequestV2::EngineForkChoiceUpdatedRequestV2(const EngineForkChoiceUpdatedRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineForkChoiceUpdatedRequestV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.forkchoicestate_){nullptr}
    , decltype(_impl_.payloadattributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forkchoicestate()) {
    _this->_impl_.forkchoicestate_ = new ::remote::EngineForkChoiceState(*from._impl_.forkchoicestate_);
  }
  if (from._internal_has_payloadattributes()) {
    _this->_impl_.payloadattributes_ = new ::remote::EnginePayloadAttributesV2(*from._impl_.payloadattributes_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.EngineForkChoiceUpdatedRequestV2)
}

inline void EngineForkChoiceUpdatedRequestV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.forkchoicestate_){nullptr}
    , decltype(_impl_.payloadattributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineForkChoiceUpdatedRequestV2::~EngineForkChoiceUpdatedRequestV2() {
  // @@protoc_insertion_point(destructor:remote.EngineForkChoiceUpdatedRequestV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineForkChoiceUpdatedRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.forkchoicestate_;
  if (this != internal_default_instance()) delete _impl_.payloadattributes_;
}

void EngineForkChoiceUpdatedRequestV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineForkChoiceUpdatedRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineForkChoiceUpdatedRequestV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.forkchoicestate_ != nullptr) {
    delete _impl_.forkchoicestate_;
  }
  _impl_.forkchoicestate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payloadattributes_ != nullptr) {
    delete _impl_.payloadattributes_;
  }
  _impl_.payloadattributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineForkChoiceUpdatedRequestV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.EngineForkChoiceState forkchoiceState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_forkchoicestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .remote.EnginePayloadAttributesV2 payloadAttributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payloadattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineForkChoiceUpdatedRequestV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineForkChoiceUpdatedRequestV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.EngineForkChoiceState forkchoiceState = 1;
  if (this->_internal_has_forkchoicestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::forkchoicestate(this),
        _Internal::forkchoicestate(this).GetCachedSize(), target, stream);
  }

  // .remote.EnginePayloadAttributesV2 payloadAttributes = 2;
  if (this->_internal_has_payloadattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payloadattributes(this),
        _Internal::payloadattributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineForkChoiceUpdatedRequestV2)
  return target;
}

size_t EngineForkChoiceUpdatedRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineForkChoiceUpdatedRequestV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.EngineForkChoiceState forkchoiceState = 1;
  if (this->_internal_has_forkchoicestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forkchoicestate_);
  }

  // .remote.EnginePayloadAttributesV2 payloadAttributes = 2;
  if (this->_internal_has_payloadattributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payloadattributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineForkChoiceUpdatedRequestV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineForkChoiceUpdatedRequestV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineForkChoiceUpdatedRequestV2::GetClassData() const { return &_class_data_; }


void EngineForkChoiceUpdatedRequestV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineForkChoiceUpdatedRequestV2*>(&to_msg);
  auto& from = static_cast<const EngineForkChoiceUpdatedRequestV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineForkChoiceUpdatedRequestV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_forkchoicestate()) {
    _this->_internal_mutable_forkchoicestate()->::remote::EngineForkChoiceState::MergeFrom(
        from._internal_forkchoicestate());
  }
  if (from._internal_has_payloadattributes()) {
    _this->_internal_mutable_payloadattributes()->::remote::EnginePayloadAttributesV2::MergeFrom(
        from._internal_payloadattributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineForkChoiceUpdatedRequestV2::CopyFrom(const EngineForkChoiceUpdatedRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineForkChoiceUpdatedRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineForkChoiceUpdatedRequestV2::IsInitialized() const {
  return true;
}

void EngineForkChoiceUpdatedRequestV2::InternalSwap(EngineForkChoiceUpdatedRequestV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineForkChoiceUpdatedRequestV2, _impl_.payloadattributes_)
      + sizeof(EngineForkChoiceUpdatedRequestV2::_impl_.payloadattributes_)
      - PROTOBUF_FIELD_OFFSET(EngineForkChoiceUpdatedRequestV2, _impl_.forkchoicestate_)>(
          reinterpret_cast<char*>(&_impl_.forkchoicestate_),
          reinterpret_cast<char*>(&other->_impl_.forkchoicestate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineForkChoiceUpdatedRequestV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[12]);
}

// ===================================================================

class EngineForkChoiceUpdatedReply::_Internal {
 public:
  static const ::remote::EnginePayloadStatus& payloadstatus(const EngineForkChoiceUpdatedReply* msg);
};

const ::remote::EnginePayloadStatus&
EngineForkChoiceUpdatedReply::_Internal::payloadstatus(const EngineForkChoiceUpdatedReply* msg) {
  return *msg->_impl_.payloadstatus_;
}
EngineForkChoiceUpdatedReply::EngineForkChoiceUpdatedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.EngineForkChoiceUpdatedReply)
}
EngineForkChoiceUpdatedReply::EngineForkChoiceUpdatedReply(const EngineForkChoiceUpdatedReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineForkChoiceUpdatedReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payloadstatus_){nullptr}
    , decltype(_impl_.payloadid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payloadstatus()) {
    _this->_impl_.payloadstatus_ = new ::remote::EnginePayloadStatus(*from._impl_.payloadstatus_);
  }
  _this->_impl_.payloadid_ = from._impl_.payloadid_;
  // @@protoc_insertion_point(copy_constructor:remote.EngineForkChoiceUpdatedReply)
}

inline void EngineForkChoiceUpdatedReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payloadstatus_){nullptr}
    , decltype(_impl_.payloadid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EngineForkChoiceUpdatedReply::~EngineForkChoiceUpdatedReply() {
  // @@protoc_insertion_point(destructor:remote.EngineForkChoiceUpdatedReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineForkChoiceUpdatedReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.payloadstatus_;
}

void EngineForkChoiceUpdatedReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineForkChoiceUpdatedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.EngineForkChoiceUpdatedReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.payloadstatus_ != nullptr) {
    delete _impl_.payloadstatus_;
  }
  _impl_.payloadstatus_ = nullptr;
  _impl_.payloadid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineForkChoiceUpdatedReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.EnginePayloadStatus payloadStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payloadstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 payloadId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.payloadid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineForkChoiceUpdatedReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.EngineForkChoiceUpdatedReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.EnginePayloadStatus payloadStatus = 1;
  if (this->_internal_has_payloadstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payloadstatus(this),
        _Internal::payloadstatus(this).GetCachedSize(), target, stream);
  }

  // uint64 payloadId = 2;
  if (this->_internal_payloadid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_payloadid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.EngineForkChoiceUpdatedReply)
  return target;
}

size_t EngineForkChoiceUpdatedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.EngineForkChoiceUpdatedReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.EnginePayloadStatus payloadStatus = 1;
  if (this->_internal_has_payloadstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payloadstatus_);
  }

  // uint64 payloadId = 2;
  if (this->_internal_payloadid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_payloadid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineForkChoiceUpdatedReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineForkChoiceUpdatedReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineForkChoiceUpdatedReply::GetClassData() const { return &_class_data_; }


void EngineForkChoiceUpdatedReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineForkChoiceUpdatedReply*>(&to_msg);
  auto& from = static_cast<const EngineForkChoiceUpdatedReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.EngineForkChoiceUpdatedReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payloadstatus()) {
    _this->_internal_mutable_payloadstatus()->::remote::EnginePayloadStatus::MergeFrom(
        from._internal_payloadstatus());
  }
  if (from._internal_payloadid() != 0) {
    _this->_internal_set_payloadid(from._internal_payloadid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineForkChoiceUpdatedReply::CopyFrom(const EngineForkChoiceUpdatedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.EngineForkChoiceUpdatedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineForkChoiceUpdatedReply::IsInitialized() const {
  return true;
}

void EngineForkChoiceUpdatedReply::InternalSwap(EngineForkChoiceUpdatedReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineForkChoiceUpdatedReply, _impl_.payloadid_)
      + sizeof(EngineForkChoiceUpdatedReply::_impl_.payloadid_)
      - PROTOBUF_FIELD_OFFSET(EngineForkChoiceUpdatedReply, _impl_.payloadstatus_)>(
          reinterpret_cast<char*>(&_impl_.payloadstatus_),
          reinterpret_cast<char*>(&other->_impl_.payloadstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineForkChoiceUpdatedReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[13]);
}

// ===================================================================

class ProtocolVersionRequest::_Internal {
 public:
};

ProtocolVersionRequest::ProtocolVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.ProtocolVersionRequest)
}
ProtocolVersionRequest::ProtocolVersionRequest(const ProtocolVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ProtocolVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ProtocolVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[14]);
}

// ===================================================================

class ProtocolVersionReply::_Internal {
 public:
};

ProtocolVersionReply::ProtocolVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.ProtocolVersionReply)
}
ProtocolVersionReply::ProtocolVersionReply(const ProtocolVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtocolVersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:remote.ProtocolVersionReply)
}

inline void ProtocolVersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtocolVersionReply::~ProtocolVersionReply() {
  // @@protoc_insertion_point(destructor:remote.ProtocolVersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtocolVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtocolVersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtocolVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ProtocolVersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolVersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtocolVersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ProtocolVersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ProtocolVersionReply)
  return target;
}

size_t ProtocolVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ProtocolVersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolVersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtocolVersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolVersionReply::GetClassData() const { return &_class_data_; }


void ProtocolVersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtocolVersionReply*>(&to_msg);
  auto& from = static_cast<const ProtocolVersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.ProtocolVersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolVersionReply::CopyFrom(const ProtocolVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ProtocolVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersionReply::IsInitialized() const {
  return true;
}

void ProtocolVersionReply::InternalSwap(ProtocolVersionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[15]);
}

// ===================================================================

class ClientVersionRequest::_Internal {
 public:
};

ClientVersionRequest::ClientVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:remote.ClientVersionRequest)
}
ClientVersionRequest::ClientVersionRequest(const ClientVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientVersionRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.ClientVersionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientVersionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[16]);
}

// ===================================================================

class ClientVersionReply::_Internal {
 public:
};

ClientVersionReply::ClientVersionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.ClientVersionReply)
}
ClientVersionReply::ClientVersionReply(const ClientVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientVersionReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    _this->_impl_.nodename_.Set(from._internal_nodename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.ClientVersionReply)
}

inline void ClientVersionReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientVersionReply::~ClientVersionReply() {
  // @@protoc_insertion_point(destructor:remote.ClientVersionReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientVersionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodename_.Destroy();
}

void ClientVersionReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.ClientVersionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientVersionReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remote.ClientVersionReply.nodeName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientVersionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.ClientVersionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "remote.ClientVersionReply.nodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.ClientVersionReply)
  return target;
}

size_t ClientVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.ClientVersionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientVersionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientVersionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientVersionReply::GetClassData() const { return &_class_data_; }


void ClientVersionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientVersionReply*>(&to_msg);
  auto& from = static_cast<const ClientVersionReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.ClientVersionReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientVersionReply::CopyFrom(const ClientVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.ClientVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientVersionReply::IsInitialized() const {
  return true;
}

void ClientVersionReply::InternalSwap(ClientVersionReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodename_, lhs_arena,
      &other->_impl_.nodename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientVersionReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[17]);
}

// ===================================================================

class SubscribeRequest::_Internal {
 public:
};

SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:remote.SubscribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.Event type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remote::Event>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }


void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeRequest*>(&to_msg);
  auto& from = static_cast<const SubscribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[18]);
}

// ===================================================================

class SubscribeReply::_Internal {
 public:
};

SubscribeReply::SubscribeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeReply)
}
SubscribeReply::SubscribeReply(const SubscribeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeReply)
}

inline void SubscribeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeReply::~SubscribeReply() {
  // @@protoc_insertion_point(destructor:remote.SubscribeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void SubscribeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .remote.Event type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remote::Event>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeReply)
  return target;
}

size_t SubscribeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .remote.Event type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeReply::GetClassData() const { return &_class_data_; }


void SubscribeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeReply*>(&to_msg);
  auto& from = static_cast<const SubscribeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeReply::CopyFrom(const SubscribeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReply::IsInitialized() const {
  return true;
}

void SubscribeReply::InternalSwap(SubscribeReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[19]);
}

// ===================================================================

class LogsFilterRequest::_Internal {
 public:
};

void LogsFilterRequest::clear_addresses() {
  _impl_.addresses_.Clear();
}
void LogsFilterRequest::clear_topics() {
  _impl_.topics_.Clear();
}
LogsFilterRequest::LogsFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.LogsFilterRequest)
}
LogsFilterRequest::LogsFilterRequest(const LogsFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogsFilterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){from._impl_.addresses_}
    , decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.alladdresses_){}
    , decltype(_impl_.alltopics_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.alladdresses_, &from._impl_.alladdresses_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alltopics_) -
    reinterpret_cast<char*>(&_impl_.alladdresses_)) + sizeof(_impl_.alltopics_));
  // @@protoc_insertion_point(copy_constructor:remote.LogsFilterRequest)
}

inline void LogsFilterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){arena}
    , decltype(_impl_.topics_){arena}
    , decltype(_impl_.alladdresses_){false}
    , decltype(_impl_.alltopics_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogsFilterRequest::~LogsFilterRequest() {
  // @@protoc_insertion_point(destructor:remote.LogsFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogsFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addresses_.~RepeatedPtrField();
  _impl_.topics_.~RepeatedPtrField();
}

void LogsFilterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogsFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.LogsFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addresses_.Clear();
  _impl_.topics_.Clear();
  ::memset(&_impl_.alladdresses_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.alltopics_) -
      reinterpret_cast<char*>(&_impl_.alladdresses_)) + sizeof(_impl_.alltopics_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogsFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool allAddresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.alladdresses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.H160 addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool allTopics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.alltopics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.H256 topics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogsFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.LogsFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allAddresses = 1;
  if (this->_internal_alladdresses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_alladdresses(), target);
  }

  // repeated .types.H160 addresses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool allTopics = 3;
  if (this->_internal_alltopics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_alltopics(), target);
  }

  // repeated .types.H256 topics = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topics_size()); i < n; i++) {
    const auto& repfield = this->_internal_topics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.LogsFilterRequest)
  return target;
}

size_t LogsFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.LogsFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H160 addresses = 2;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->_impl_.addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .types.H256 topics = 4;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->_impl_.topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool allAddresses = 1;
  if (this->_internal_alladdresses() != 0) {
    total_size += 1 + 1;
  }

  // bool allTopics = 3;
  if (this->_internal_alltopics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogsFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogsFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogsFilterRequest::GetClassData() const { return &_class_data_; }


void LogsFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogsFilterRequest*>(&to_msg);
  auto& from = static_cast<const LogsFilterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.LogsFilterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addresses_.MergeFrom(from._impl_.addresses_);
  _this->_impl_.topics_.MergeFrom(from._impl_.topics_);
  if (from._internal_alladdresses() != 0) {
    _this->_internal_set_alladdresses(from._internal_alladdresses());
  }
  if (from._internal_alltopics() != 0) {
    _this->_internal_set_alltopics(from._internal_alltopics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogsFilterRequest::CopyFrom(const LogsFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.LogsFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogsFilterRequest::IsInitialized() const {
  return true;
}

void LogsFilterRequest::InternalSwap(LogsFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addresses_.InternalSwap(&other->_impl_.addresses_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogsFilterRequest, _impl_.alltopics_)
      + sizeof(LogsFilterRequest::_impl_.alltopics_)
      - PROTOBUF_FIELD_OFFSET(LogsFilterRequest, _impl_.alladdresses_)>(
          reinterpret_cast<char*>(&_impl_.alladdresses_),
          reinterpret_cast<char*>(&other->_impl_.alladdresses_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogsFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[20]);
}

// ===================================================================

class SubscribeLogsReply::_Internal {
 public:
  static const ::types::H160& address(const SubscribeLogsReply* msg);
  static const ::types::H256& blockhash(const SubscribeLogsReply* msg);
  static const ::types::H256& transactionhash(const SubscribeLogsReply* msg);
};

const ::types::H160&
SubscribeLogsReply::_Internal::address(const SubscribeLogsReply* msg) {
  return *msg->_impl_.address_;
}
const ::types::H256&
SubscribeLogsReply::_Internal::blockhash(const SubscribeLogsReply* msg) {
  return *msg->_impl_.blockhash_;
}
const ::types::H256&
SubscribeLogsReply::_Internal::transactionhash(const SubscribeLogsReply* msg) {
  return *msg->_impl_.transactionhash_;
}
void SubscribeLogsReply::clear_address() {
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
}
void SubscribeLogsReply::clear_blockhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockhash_ != nullptr) {
    delete _impl_.blockhash_;
  }
  _impl_.blockhash_ = nullptr;
}
void SubscribeLogsReply::clear_topics() {
  _impl_.topics_.Clear();
}
void SubscribeLogsReply::clear_transactionhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.transactionhash_ != nullptr) {
    delete _impl_.transactionhash_;
  }
  _impl_.transactionhash_ = nullptr;
}
SubscribeLogsReply::SubscribeLogsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.SubscribeLogsReply)
}
SubscribeLogsReply::SubscribeLogsReply(const SubscribeLogsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeLogsReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.blockhash_){nullptr}
    , decltype(_impl_.transactionhash_){nullptr}
    , decltype(_impl_.blocknumber_){}
    , decltype(_impl_.logindex_){}
    , decltype(_impl_.transactionindex_){}
    , decltype(_impl_.removed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_address()) {
    _this->_impl_.address_ = new ::types::H160(*from._impl_.address_);
  }
  if (from._internal_has_blockhash()) {
    _this->_impl_.blockhash_ = new ::types::H256(*from._impl_.blockhash_);
  }
  if (from._internal_has_transactionhash()) {
    _this->_impl_.transactionhash_ = new ::types::H256(*from._impl_.transactionhash_);
  }
  ::memcpy(&_impl_.blocknumber_, &from._impl_.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.removed_) -
    reinterpret_cast<char*>(&_impl_.blocknumber_)) + sizeof(_impl_.removed_));
  // @@protoc_insertion_point(copy_constructor:remote.SubscribeLogsReply)
}

inline void SubscribeLogsReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.address_){nullptr}
    , decltype(_impl_.blockhash_){nullptr}
    , decltype(_impl_.transactionhash_){nullptr}
    , decltype(_impl_.blocknumber_){uint64_t{0u}}
    , decltype(_impl_.logindex_){uint64_t{0u}}
    , decltype(_impl_.transactionindex_){uint64_t{0u}}
    , decltype(_impl_.removed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeLogsReply::~SubscribeLogsReply() {
  // @@protoc_insertion_point(destructor:remote.SubscribeLogsReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeLogsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topics_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.address_;
  if (this != internal_default_instance()) delete _impl_.blockhash_;
  if (this != internal_default_instance()) delete _impl_.transactionhash_;
}

void SubscribeLogsReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeLogsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.SubscribeLogsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topics_.Clear();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.address_ != nullptr) {
    delete _impl_.address_;
  }
  _impl_.address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockhash_ != nullptr) {
    delete _impl_.blockhash_;
  }
  _impl_.blockhash_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transactionhash_ != nullptr) {
    delete _impl_.transactionhash_;
  }
  _impl_.transactionhash_ = nullptr;
  ::memset(&_impl_.blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.removed_) -
      reinterpret_cast<char*>(&_impl_.blocknumber_)) + sizeof(_impl_.removed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeLogsReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H160 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 blockHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 logIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.logindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.H256 topics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .types.H256 transactionHash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactionhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 transactionIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.transactionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool removed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeLogsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.SubscribeLogsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::address(this),
        _Internal::address(this).GetCachedSize(), target, stream);
  }

  // .types.H256 blockHash = 2;
  if (this->_internal_has_blockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::blockhash(this),
        _Internal::blockhash(this).GetCachedSize(), target, stream);
  }

  // uint64 blockNumber = 3;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blocknumber(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 logIndex = 5;
  if (this->_internal_logindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_logindex(), target);
  }

  // repeated .types.H256 topics = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topics_size()); i < n; i++) {
    const auto& repfield = this->_internal_topics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .types.H256 transactionHash = 7;
  if (this->_internal_has_transactionhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::transactionhash(this),
        _Internal::transactionhash(this).GetCachedSize(), target, stream);
  }

  // uint64 transactionIndex = 8;
  if (this->_internal_transactionindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_transactionindex(), target);
  }

  // bool removed = 9;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.SubscribeLogsReply)
  return target;
}

size_t SubscribeLogsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.SubscribeLogsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.H256 topics = 6;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->_impl_.topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .types.H160 address = 1;
  if (this->_internal_has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.address_);
  }

  // .types.H256 blockHash = 2;
  if (this->_internal_has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockhash_);
  }

  // .types.H256 transactionHash = 7;
  if (this->_internal_has_transactionhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transactionhash_);
  }

  // uint64 blockNumber = 3;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocknumber());
  }

  // uint64 logIndex = 5;
  if (this->_internal_logindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_logindex());
  }

  // uint64 transactionIndex = 8;
  if (this->_internal_transactionindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_transactionindex());
  }

  // bool removed = 9;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeLogsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeLogsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeLogsReply::GetClassData() const { return &_class_data_; }


void SubscribeLogsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeLogsReply*>(&to_msg);
  auto& from = static_cast<const SubscribeLogsReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.SubscribeLogsReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topics_.MergeFrom(from._impl_.topics_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_address()) {
    _this->_internal_mutable_address()->::types::H160::MergeFrom(
        from._internal_address());
  }
  if (from._internal_has_blockhash()) {
    _this->_internal_mutable_blockhash()->::types::H256::MergeFrom(
        from._internal_blockhash());
  }
  if (from._internal_has_transactionhash()) {
    _this->_internal_mutable_transactionhash()->::types::H256::MergeFrom(
        from._internal_transactionhash());
  }
  if (from._internal_blocknumber() != 0) {
    _this->_internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_logindex() != 0) {
    _this->_internal_set_logindex(from._internal_logindex());
  }
  if (from._internal_transactionindex() != 0) {
    _this->_internal_set_transactionindex(from._internal_transactionindex());
  }
  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeLogsReply::CopyFrom(const SubscribeLogsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.SubscribeLogsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLogsReply::IsInitialized() const {
  return true;
}

void SubscribeLogsReply::InternalSwap(SubscribeLogsReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeLogsReply, _impl_.removed_)
      + sizeof(SubscribeLogsReply::_impl_.removed_)
      - PROTOBUF_FIELD_OFFSET(SubscribeLogsReply, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLogsReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[21]);
}

// ===================================================================

class BlockRequest::_Internal {
 public:
  static const ::types::H256& blockhash(const BlockRequest* msg);
};

const ::types::H256&
BlockRequest::_Internal::blockhash(const BlockRequest* msg) {
  return *msg->_impl_.blockhash_;
}
void BlockRequest::clear_blockhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockhash_ != nullptr) {
    delete _impl_.blockhash_;
  }
  _impl_.blockhash_ = nullptr;
}
BlockRequest::BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockhash_){nullptr}
    , decltype(_impl_.blockheight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blockhash()) {
    _this->_impl_.blockhash_ = new ::types::H256(*from._impl_.blockhash_);
  }
  _this->_impl_.blockheight_ = from._impl_.blockheight_;
  // @@protoc_insertion_point(copy_constructor:remote.BlockRequest)
}

inline void BlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockhash_){nullptr}
    , decltype(_impl_.blockheight_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:remote.BlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.blockhash_;
}

void BlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.BlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.blockhash_ != nullptr) {
    delete _impl_.blockhash_;
  }
  _impl_.blockhash_ = nullptr;
  _impl_.blockheight_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.blockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.H256 blockHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.BlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockHeight = 2;
  if (this->_internal_blockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_blockheight(), target);
  }

  // .types.H256 blockHash = 3;
  if (this->_internal_has_blockhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::blockhash(this),
        _Internal::blockhash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.BlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 blockHash = 3;
  if (this->_internal_has_blockhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockhash_);
  }

  // uint64 blockHeight = 2;
  if (this->_internal_blockheight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blockheight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRequest::GetClassData() const { return &_class_data_; }


void BlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRequest*>(&to_msg);
  auto& from = static_cast<const BlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.BlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blockhash()) {
    _this->_internal_mutable_blockhash()->::types::H256::MergeFrom(
        from._internal_blockhash());
  }
  if (from._internal_blockheight() != 0) {
    _this->_internal_set_blockheight(from._internal_blockheight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRequest, _impl_.blockheight_)
      + sizeof(BlockRequest::_impl_.blockheight_)
      - PROTOBUF_FIELD_OFFSET(BlockRequest, _impl_.blockhash_)>(
          reinterpret_cast<char*>(&_impl_.blockhash_),
          reinterpret_cast<char*>(&other->_impl_.blockhash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[22]);
}

// ===================================================================

class BlockReply::_Internal {
 public:
};

BlockReply::BlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.BlockReply)
}
BlockReply::BlockReply(const BlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockrlp_){}
    , decltype(_impl_.senders_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blockrlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockrlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockrlp().empty()) {
    _this->_impl_.blockrlp_.Set(from._internal_blockrlp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.senders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_senders().empty()) {
    _this->_impl_.senders_.Set(from._internal_senders(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.BlockReply)
}

inline void BlockReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockrlp_){}
    , decltype(_impl_.senders_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.blockrlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockrlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.senders_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senders_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockReply::~BlockReply() {
  // @@protoc_insertion_point(destructor:remote.BlockReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blockrlp_.Destroy();
  _impl_.senders_.Destroy();
}

void BlockReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.BlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blockrlp_.ClearToEmpty();
  _impl_.senders_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes blockRlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blockrlp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes senders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_senders();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.BlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blockRlp = 1;
  if (!this->_internal_blockrlp().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blockrlp(), target);
  }

  // bytes senders = 2;
  if (!this->_internal_senders().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_senders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.BlockReply)
  return target;
}

size_t BlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.BlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blockRlp = 1;
  if (!this->_internal_blockrlp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockrlp());
  }

  // bytes senders = 2;
  if (!this->_internal_senders().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_senders());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockReply::GetClassData() const { return &_class_data_; }


void BlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockReply*>(&to_msg);
  auto& from = static_cast<const BlockReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.BlockReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blockrlp().empty()) {
    _this->_internal_set_blockrlp(from._internal_blockrlp());
  }
  if (!from._internal_senders().empty()) {
    _this->_internal_set_senders(from._internal_senders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockReply::CopyFrom(const BlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.BlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReply::IsInitialized() const {
  return true;
}

void BlockReply::InternalSwap(BlockReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockrlp_, lhs_arena,
      &other->_impl_.blockrlp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senders_, lhs_arena,
      &other->_impl_.senders_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[23]);
}

// ===================================================================

class TxnLookupRequest::_Internal {
 public:
  static const ::types::H256& txnhash(const TxnLookupRequest* msg);
};

const ::types::H256&
TxnLookupRequest::_Internal::txnhash(const TxnLookupRequest* msg) {
  return *msg->_impl_.txnhash_;
}
void TxnLookupRequest::clear_txnhash() {
  if (GetArenaForAllocation() == nullptr && _impl_.txnhash_ != nullptr) {
    delete _impl_.txnhash_;
  }
  _impl_.txnhash_ = nullptr;
}
TxnLookupRequest::TxnLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.TxnLookupRequest)
}
TxnLookupRequest::TxnLookupRequest(const TxnLookupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxnLookupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txnhash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_txnhash()) {
    _this->_impl_.txnhash_ = new ::types::H256(*from._impl_.txnhash_);
  }
  // @@protoc_insertion_point(copy_constructor:remote.TxnLookupRequest)
}

inline void TxnLookupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txnhash_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxnLookupRequest::~TxnLookupRequest() {
  // @@protoc_insertion_point(destructor:remote.TxnLookupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxnLookupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.txnhash_;
}

void TxnLookupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxnLookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.TxnLookupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.txnhash_ != nullptr) {
    delete _impl_.txnhash_;
  }
  _impl_.txnhash_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxnLookupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.H256 txnHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txnhash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxnLookupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.TxnLookupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.H256 txnHash = 1;
  if (this->_internal_has_txnhash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::txnhash(this),
        _Internal::txnhash(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.TxnLookupRequest)
  return target;
}

size_t TxnLookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.TxnLookupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.H256 txnHash = 1;
  if (this->_internal_has_txnhash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.txnhash_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxnLookupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxnLookupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxnLookupRequest::GetClassData() const { return &_class_data_; }


void TxnLookupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxnLookupRequest*>(&to_msg);
  auto& from = static_cast<const TxnLookupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.TxnLookupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txnhash()) {
    _this->_internal_mutable_txnhash()->::types::H256::MergeFrom(
        from._internal_txnhash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxnLookupRequest::CopyFrom(const TxnLookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.TxnLookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnLookupRequest::IsInitialized() const {
  return true;
}

void TxnLookupRequest::InternalSwap(TxnLookupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.txnhash_, other->_impl_.txnhash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnLookupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[24]);
}

// ===================================================================

class TxnLookupReply::_Internal {
 public:
};

TxnLookupReply::TxnLookupReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.TxnLookupReply)
}
TxnLookupReply::TxnLookupReply(const TxnLookupReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxnLookupReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocknumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.blocknumber_ = from._impl_.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:remote.TxnLookupReply)
}

inline void TxnLookupReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocknumber_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxnLookupReply::~TxnLookupReply() {
  // @@protoc_insertion_point(destructor:remote.TxnLookupReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxnLookupReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TxnLookupReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxnLookupReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.TxnLookupReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocknumber_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxnLookupReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxnLookupReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.TxnLookupReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.TxnLookupReply)
  return target;
}

size_t TxnLookupReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.TxnLookupReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocknumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxnLookupReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxnLookupReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxnLookupReply::GetClassData() const { return &_class_data_; }


void TxnLookupReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxnLookupReply*>(&to_msg);
  auto& from = static_cast<const TxnLookupReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.TxnLookupReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blocknumber() != 0) {
    _this->_internal_set_blocknumber(from._internal_blocknumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxnLookupReply::CopyFrom(const TxnLookupReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.TxnLookupReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnLookupReply::IsInitialized() const {
  return true;
}

void TxnLookupReply::InternalSwap(TxnLookupReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.blocknumber_, other->_impl_.blocknumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnLookupReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[25]);
}

// ===================================================================

class NodesInfoRequest::_Internal {
 public:
};

NodesInfoRequest::NodesInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NodesInfoRequest)
}
NodesInfoRequest::NodesInfoRequest(const NodesInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodesInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:remote.NodesInfoRequest)
}

inline void NodesInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.limit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodesInfoRequest::~NodesInfoRequest() {
  // @@protoc_insertion_point(destructor:remote.NodesInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodesInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodesInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodesInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NodesInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodesInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NodesInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NodesInfoRequest)
  return target;
}

size_t NodesInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NodesInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodesInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodesInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodesInfoRequest::GetClassData() const { return &_class_data_; }


void NodesInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodesInfoRequest*>(&to_msg);
  auto& from = static_cast<const NodesInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NodesInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodesInfoRequest::CopyFrom(const NodesInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NodesInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfoRequest::IsInitialized() const {
  return true;
}

void NodesInfoRequest::InternalSwap(NodesInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[26]);
}

// ===================================================================

class NodesInfoReply::_Internal {
 public:
};

void NodesInfoReply::clear_nodesinfo() {
  _impl_.nodesinfo_.Clear();
}
NodesInfoReply::NodesInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.NodesInfoReply)
}
NodesInfoReply::NodesInfoReply(const NodesInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodesInfoReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodesinfo_){from._impl_.nodesinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.NodesInfoReply)
}

inline void NodesInfoReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodesinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodesInfoReply::~NodesInfoReply() {
  // @@protoc_insertion_point(destructor:remote.NodesInfoReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodesInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodesinfo_.~RepeatedPtrField();
}

void NodesInfoReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodesInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.NodesInfoReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodesinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodesInfoReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.NodeInfoReply nodesInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodesinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodesInfoReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.NodesInfoReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.NodeInfoReply nodesInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodesinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodesinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.NodesInfoReply)
  return target;
}

size_t NodesInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.NodesInfoReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.NodeInfoReply nodesInfo = 1;
  total_size += 1UL * this->_internal_nodesinfo_size();
  for (const auto& msg : this->_impl_.nodesinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodesInfoReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodesInfoReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodesInfoReply::GetClassData() const { return &_class_data_; }


void NodesInfoReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodesInfoReply*>(&to_msg);
  auto& from = static_cast<const NodesInfoReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.NodesInfoReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodesinfo_.MergeFrom(from._impl_.nodesinfo_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodesInfoReply::CopyFrom(const NodesInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.NodesInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesInfoReply::IsInitialized() const {
  return true;
}

void NodesInfoReply::InternalSwap(NodesInfoReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodesinfo_.InternalSwap(&other->_impl_.nodesinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesInfoReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[27]);
}

// ===================================================================

class PeersReply::_Internal {
 public:
};

void PeersReply::clear_peers() {
  _impl_.peers_.Clear();
}
PeersReply::PeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.PeersReply)
}
PeersReply::PeersReply(const PeersReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeersReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remote.PeersReply)
}

inline void PeersReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeersReply::~PeersReply() {
  // @@protoc_insertion_point(destructor:remote.PeersReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeersReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
}

void PeersReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeersReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.PeersReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeersReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .types.PeerInfo peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeersReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.PeersReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.PeersReply)
  return target;
}

size_t PeersReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.PeersReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.PeerInfo peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeersReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeersReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeersReply::GetClassData() const { return &_class_data_; }


void PeersReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeersReply*>(&to_msg);
  auto& from = static_cast<const PeersReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.PeersReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeersReply::CopyFrom(const PeersReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.PeersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeersReply::IsInitialized() const {
  return true;
}

void PeersReply::InternalSwap(PeersReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeersReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[28]);
}

// ===================================================================

class PendingBlockReply::_Internal {
 public:
};

PendingBlockReply::PendingBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:remote.PendingBlockReply)
}
PendingBlockReply::PendingBlockReply(const PendingBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PendingBlockReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockrlp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.blockrlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockrlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockrlp().empty()) {
    _this->_impl_.blockrlp_.Set(from._internal_blockrlp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:remote.PendingBlockReply)
}

inline void PendingBlockReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockrlp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.blockrlp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockrlp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PendingBlockReply::~PendingBlockReply() {
  // @@protoc_insertion_point(destructor:remote.PendingBlockReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PendingBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blockrlp_.Destroy();
}

void PendingBlockReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PendingBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remote.PendingBlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blockrlp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingBlockReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes blockRlp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blockrlp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PendingBlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remote.PendingBlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blockRlp = 1;
  if (!this->_internal_blockrlp().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blockrlp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remote.PendingBlockReply)
  return target;
}

size_t PendingBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remote.PendingBlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blockRlp = 1;
  if (!this->_internal_blockrlp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockrlp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PendingBlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PendingBlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PendingBlockReply::GetClassData() const { return &_class_data_; }


void PendingBlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PendingBlockReply*>(&to_msg);
  auto& from = static_cast<const PendingBlockReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remote.PendingBlockReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blockrlp().empty()) {
    _this->_internal_set_blockrlp(from._internal_blockrlp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PendingBlockReply::CopyFrom(const PendingBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remote.PendingBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingBlockReply::IsInitialized() const {
  return true;
}

void PendingBlockReply::InternalSwap(PendingBlockReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockrlp_, lhs_arena,
      &other->_impl_.blockrlp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingBlockReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_2fethbackend_2eproto_getter, &descriptor_table_remote_2fethbackend_2eproto_once,
      file_level_metadata_remote_2fethbackend_2eproto[29]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remote::EtherbaseRequest*
Arena::CreateMaybeMessage< ::remote::EtherbaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EtherbaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EtherbaseReply*
Arena::CreateMaybeMessage< ::remote::EtherbaseReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EtherbaseReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetVersionRequest*
Arena::CreateMaybeMessage< ::remote::NetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetVersionReply*
Arena::CreateMaybeMessage< ::remote::NetVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetPeerCountRequest*
Arena::CreateMaybeMessage< ::remote::NetPeerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetPeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NetPeerCountReply*
Arena::CreateMaybeMessage< ::remote::NetPeerCountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NetPeerCountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineGetPayloadRequest*
Arena::CreateMaybeMessage< ::remote::EngineGetPayloadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineGetPayloadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EnginePayloadStatus*
Arena::CreateMaybeMessage< ::remote::EnginePayloadStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EnginePayloadStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EnginePayloadAttributes*
Arena::CreateMaybeMessage< ::remote::EnginePayloadAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EnginePayloadAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineForkChoiceState*
Arena::CreateMaybeMessage< ::remote::EngineForkChoiceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineForkChoiceState >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineForkChoiceUpdatedRequest*
Arena::CreateMaybeMessage< ::remote::EngineForkChoiceUpdatedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineForkChoiceUpdatedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EnginePayloadAttributesV2*
Arena::CreateMaybeMessage< ::remote::EnginePayloadAttributesV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EnginePayloadAttributesV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineForkChoiceUpdatedRequestV2*
Arena::CreateMaybeMessage< ::remote::EngineForkChoiceUpdatedRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineForkChoiceUpdatedRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::EngineForkChoiceUpdatedReply*
Arena::CreateMaybeMessage< ::remote::EngineForkChoiceUpdatedReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::EngineForkChoiceUpdatedReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ProtocolVersionRequest*
Arena::CreateMaybeMessage< ::remote::ProtocolVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ProtocolVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ProtocolVersionReply*
Arena::CreateMaybeMessage< ::remote::ProtocolVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ProtocolVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ClientVersionRequest*
Arena::CreateMaybeMessage< ::remote::ClientVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ClientVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::ClientVersionReply*
Arena::CreateMaybeMessage< ::remote::ClientVersionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::ClientVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeRequest*
Arena::CreateMaybeMessage< ::remote::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeReply*
Arena::CreateMaybeMessage< ::remote::SubscribeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::LogsFilterRequest*
Arena::CreateMaybeMessage< ::remote::LogsFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::LogsFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::SubscribeLogsReply*
Arena::CreateMaybeMessage< ::remote::SubscribeLogsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::SubscribeLogsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::BlockRequest*
Arena::CreateMaybeMessage< ::remote::BlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::BlockReply*
Arena::CreateMaybeMessage< ::remote::BlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::BlockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::TxnLookupRequest*
Arena::CreateMaybeMessage< ::remote::TxnLookupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::TxnLookupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::TxnLookupReply*
Arena::CreateMaybeMessage< ::remote::TxnLookupReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::TxnLookupReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NodesInfoRequest*
Arena::CreateMaybeMessage< ::remote::NodesInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NodesInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::NodesInfoReply*
Arena::CreateMaybeMessage< ::remote::NodesInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::NodesInfoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::PeersReply*
Arena::CreateMaybeMessage< ::remote::PeersReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::PeersReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remote::PendingBlockReply*
Arena::CreateMaybeMessage< ::remote::PendingBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remote::PendingBlockReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
